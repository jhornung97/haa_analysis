from __future__ import annotations  # needed for type annotations in > python 3.7

from typing import List, Union
import os
#from .producers import muon_sf_friends as muon_sf_friends
from .producers import pfcands as pfcands
from .quantities import output as q
from .quantities import nanoAOD as nanoAOD
from code_generation.configuration import Configuration
from code_generation.modifiers import EraModifier
from code_generation.rules import RemoveProducer
from code_generation.systematics import SystematicShift


def build_config(
    era: str,
    sample: str,
    scopes: List[str],
    shifts: List[str],
    available_sample_types: List[str],
    available_eras: List[str],
    available_scopes: List[str],
    quantities_map: Union[str, None] = None,
):
    # for the test, we provide a quantities map
    '''
    quantities_map = os.path.join(
        os.path.dirname(os.path.abspath(__file__)),
        "dyjets_shift_quantities_map.json",
    )
    '''
    configuration = Configuration(
        era,
        sample,
        scopes,
        shifts,
        available_sample_types,
        available_eras,
        available_scopes,
        #quantities_map,
    )

    configuration.add_config_parameters(
        ["global"],
        {
            "genpart_pdgid": "23",
            "genpart_status": "62"
        },
    )

    configuration.add_producers(
        ["global"],
        [
            pfcands.BaseZs,
            pfcands.ZFilter,
            pfcands.z_pt
        ],
    )

    configuration.add_producers(
        ["mm"],
        [
            pfcands.z_pt
        ],
    )

    configuration.add_outputs(
        ["global"],
        [
            nanoAOD.genWeight,
        ],
    )
    configuration.add_outputs(
        ["mm"],
        [
            q.z_pt
        ],
    )

    #########################
    # Finalize and validate the configuration
    #########################
    configuration.optimize()
    configuration.validate()
    configuration.report()
    return configuration.expanded_configuration()
